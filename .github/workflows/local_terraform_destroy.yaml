name: 'Terraform Destroy Remote'

on:
  workflow_dispatch:
    inputs:
      Password:
        description: 'Password to trigger the terraform apply'
        required: true
        default: ''

env:
  REPOSITORY: "stack-aws-eks"

jobs:
  cleanup:
    runs-on: self-hosted
    #container:
      #image: ubuntu:latest
    steps:
      - name: Create repository folder
        run: |
            mkdir -p __w/${{ github.event.repository.name }}/${{ github.event.repository.name }}
            
      - name: Cleaning up the $GITHUB_WORKSPACE as root from a Docker image
        #run: echo "jo"
        run: find /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/. -name . -o -prune -exec rm -rf -- {} + || true
        
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    needs: cleanup
    defaults:
      run:
        shell: bash
    if: github.ref == 'refs/heads/main'
    steps:
    
    - name: Create repository folder
      run: |
            mkdir -p __w/${{ github.event.repository.name }}/${{ github.event.repository.name }} 
            
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: (GLOBAL) Check out ${{env.REPOSITORY}} repository
      uses: actions/checkout@master
      with:
        token: ${{ secrets.PAT }}
        repository: callruby/${{env.REPOSITORY}}
        path: ${{env.REPOSITORY}}
        ref: 'master'      

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 0.14.0      

    - name: Configure the Master AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        
    - name: Terraform fmt
      id: fmt
      run: |
        cp -f aws/variables.tf stack-aws-eks/blueprint-local-env/variables.tf
        cd stack-aws-eks/blueprint-local-env
        terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        pwd
        cd stack-aws-eks/blueprint-local-env
        terraform init

    - name: .terraform permissions
      run: |
        ls -la
        pwd
        cd stack-aws-eks/blueprint-local-env
        sudo chown -R runner:runner .terraform
        
    - name: Terraform Validate
      id: validate
      run: |
        pwd
        cd stack-aws-eks/blueprint-local-env      
        terraform validate -no-color
        
    - name: Terraform Plan
      id: plan
      run: |
        pwd
        cd stack-aws-eks/blueprint-local-env      
        terraform plan -input=false -refresh=true -out tfplan.binary
        terraform show -json tfplan.binary > plan.json
      continue-on-error: false
        
    - name: Check Password
      id: CheckPassword
      run: |
        if [[ "${{github.event.inputs.Password}}" == "${{secrets.DEPLOY_PASSWORD}}" ]]; then
          echo "===================================="
          echo "The password match"
          echo "===================================="
          exit 0
        else
          echo "===================================="
          echo "The password not match"
          echo "===================================="
          exit 1
        fi
        
    - name: Terraform Destroy
      id: destroy
      run: |
        pwd
        cd stack-aws-eks/blueprint-local-env      
        terraform destroy -input=false -refresh=true -auto-approve
      continue-on-error: false
