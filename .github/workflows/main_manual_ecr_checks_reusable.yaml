name: Update App to the Selected Environment.

on:
  workflow_dispatch: #workflow_call:
    inputs:
      Environment:
        description: 'Environment where has to be deployed'
        type: choice
        required: true
        options: 
        - qa1
        - qa2
        - qa3
        - qa4
        - qa5
        - qa6
      Tag:
        description: 'Image Tag be deployed Qa1-Qa6'
        type: string
        required: true
        default: ''
jobs:

  init:
    runs-on: self-hosted
    #runs-on: ubuntu-latest #Uncomment if it has to be run on a public Agent

    steps:
    - uses: actions/checkout@v2.0.0

    - name: Turnstyle
      uses: softprops/turnstyle@v1
      with:
         continue-after-seconds: 500 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: (GLOBAL) Configure Service name.
      run: |
        echo "EKS_SERVICE=${{secrets.EKS_SERVICE}}" >> $GITHUB_ENV
        echo "ECS_QA_CLUSTER_NAME=${{secrets.ECS_QA_CLUSTER_NAME}}" >> $GITHUB_ENV
        echo "ECS_QA_SERVICE_NAME=${{secrets.ECS_QA_SERVICE_NAME}}" >> $GITHUB_ENV
        echo "DEPLOY_TO_ECS=${{secrets.DEPLOY_TO_ECS}}" >> $GITHUB_ENV        
        echo "AWS_WEB_IDENTITY_TOKEN_FILE=" >> $GITHUB_ENV
        
    - name: (GLOBAL) Debug
      run: |
        echo "Environment: ${{github.event.inputs.Environment}}"

    - name: (GLOBAL) Check out ruby-apps-deploy repository
      uses: actions/checkout@master
      with:
        token: ${{ secrets.PAT }}
        repository: callruby/ruby-apps-deploy
        path: ruby-apps-deploy
        ref: 'master'        

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true
        
    - uses: imranismail/setup-kustomize@v1
    
    - name: (GLOBAL) Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: us-west-1
        
    - name: (SHARED) Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
    - name: (DEV) Check if the docker image tag exist
      id: CheckTag
      run: |
        echo "===================================="
        echo "DEBUG:"
        echo "IMAGE_TAG: ${{github.event.inputs.Tag}}"
        echo "EKS_SERVICE: ${EKS_SERVICE}"
        echo "===================================="
        IMAGE_EXIST=$(aws ecr batch-get-image --repository-name=${EKS_SERVICE} --image-ids=imageTag=${{github.event.inputs.Tag}} --query 'images[].imageId.imageTag' --output text)
        echo "IMAGE_EXIST=${IMAGE_EXIST}" >> $GITHUB_ENV         
        
    - name: (QA) Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.S3_OLD_QA_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.S3_OLD_QA_AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
           
    - id: install-aws-cli
      uses: unfor19/install-aws-cli-action@v1.0.3
      with:
        version: 2     # default
        verbose: false # default
        arch: amd64    # allowed values: amd64, arm64        
    
    - name: (DEV) Update Tag - Deploy to EKS through ArgoCD and ECS
      id: UpdateTag
      run: |
        echo "===================================="
        echo "DEBUG:"
        echo "IMAGE_TAG: ${{github.event.inputs.Tag}}"
        echo "EKS_SERVICE: ${EKS_SERVICE}"
        echo "===================================="

        ECR_REPO=425300134585.dkr.ecr.us-west-1.amazonaws.com        
        ENV=${{ github.event.inputs.Environment }}
        case $EKS_SERVICE in
          prl-frontend)
            ECR_REPO_NAME=prlv2-frontend
            ;;
          servicehandling-service)
            ECR_REPO_NAME=servicehandlingservice
            ;;
          prl-webapi)
            ECR_REPO_NAME=prlv2-webapi
            ;;
          identity-service)
            ECR_REPO_NAME=identity-server
            ;;
          employeedirectory-service)
            ECR_REPO_NAME=employeedirectory
            ;;
          prl-authentication-service)
            ECR_REPO_NAME=newprl-auth-service
            ;;            
          *)
            ECR_REPO_NAME=$EKS_SERVICE
           ;;
        esac
        echo "ECR_REPO_NAME=${ECR_REPO_NAME}" >> $GITHUB_ENV         
        
        docker pull ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:${{github.event.inputs.Tag}} 
        docker tag ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:${{github.event.inputs.Tag}} callrubydev/$ECR_REPO_NAME:$ENV
        docker push callrubydev/$ECR_REPO_NAME:$ENV
        if [[ "$DEPLOY_TO_ECS" == "true" ]]; then
          echo "===================================================================================================="
          echo "Deploying to ECS: ${ECS_QA_SERVICE_NAME}_${VAL}"
          echo "===================================================================================================="
          aws ecs update-service --cluster "${ECS_QA_CLUSTER_NAME}" --service "${ECS_QA_SERVICE_NAME}_${VAL}" --force-new-deployment --region us-west-2
          sleep 3
          echo "===================================================================================================="
          echo "Waiting for the deployment on ECS "
          echo "===================================================================================================="  
          aws ecs wait services-stable --cluster "${ECS_QA_CLUSTER_NAME}" --services "${ECS_QA_SERVICE_NAME}_${VAL}" --region us-west-2 
        else
          echo "===================================================================================================="
          echo "Ignore deploy to ECS"
          echo "===================================================================================================="  
        fi        
        ls -la ruby-apps-deploy
        cd ruby-apps-deploy/helm/$ENV/$EKS_SERVICE
        ls -la
        #IMAGE_EXIST=$(aws ecr batch-get-image --repository-name=${EKS_SERVICE} --image-ids=imageTag=${{github.event.inputs.Tag}} --query 'images[].imageId.imageTag' --output text)
        if [[ -n "$IMAGE_EXIST" ]]; then
          echo "================================================================================"
          echo "Image exist on ECR!!!!!!!!!"
          echo "================================================================================"
          sed -i -e "s|image:.*|image: $ECR_REPO/${EKS_SERVICE}:${{github.event.inputs.Tag}}|g" values.yaml
          cat values.yaml
          git config user.email "check-action@github"
          git config user.name "check-action"
          git pull
          #git add kustomization.yml
          git add values.yaml
          git commit -m "Update ${EKS_SERVICE} image to ${{github.event.inputs.Tag}} on deploy folder/file $ENV"
          set +e
          git push origin master > error 
          cat error
          if [[ $(cat error | grep -c "error" ) -eq 1 ]]; then
            echo "========================================================"
            echo "Retrying...."
            echo "========================================================"
            set -e
            sleep 5
            git pull
            git commit -m "Update ${EKS_SERVICE} image to ${{github.event.inputs.Tag}} on deploy folder/file $ENV"
            git push origin master
          fi
        else
          echo "================================================================================"
          echo "Image not exist on ECR please check" 
          echo "================================================================================"
          exit 1
        fi

    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.17.0
      with:
        channel-id: ${{ secrets.SLACK_BOT_CHANNEL }}
        slack-message: "Image ${{env.EKS_SERVICE}}:${{github.event.inputs.Tag}} was selected to be deployed into ${{ github.event.inputs.Environment }} (manual deployment), result: ${{ job.status }}\n"
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v2
