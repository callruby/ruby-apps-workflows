on:
  workflow_dispatch:
 
name: Spoofing - Create Tag & Release After Dev Deploy

env:
  REPOSITORY_WORKFLOW: "ruby-apps-workflows"
  AWS_DEFAULT_REGION: "us-west-1"
jobs:
  build:
    runs-on: self-hosted
    #runs-on: ubuntu-latest #Uncomment if it has to be run on a public Agent
    steps:
    - uses: actions/checkout@v2.0.0

    - name: Turnstyle
      uses: softprops/turnstyle@v1
      with:
         continue-after-seconds: 500 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                      
    - name: (GLOBAL) Check out ${{env.REPOSITORY_WORKFLOW}} repository
      uses: actions/checkout@master
      with:
        token: ${{ secrets.PAT }}
        repository: callruby/${{env.REPOSITORY_WORKFLOW}}
        path: ${{env.REPOSITORY_WORKFLOW}}
        ref: 'master'
        fetch-depth: 1                  
                  
    - name: (GLOBAL) Configure Service name.
      run: |
        echo "EKS_SERVICE=spoofing" >> $GITHUB_ENV
        #echo "EKS_SERVICE=${{secrets.EKS_SERVICE}}" >> $GITHUB_ENV
   
   #Comment if it has to be run on a public Agent 
    - name: (GLOBAL) Configure AWS credentials using the secrets obtained from Vault
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    
    #Uncomment if it has to be run on a public Agent
    #- name: (GLOBAL) Configure AWS credentials
      #uses: aws-actions/configure-aws-credentials@v1
      #with:
        #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        #aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
        
    - name: Set Image TAG
      id: slug
      run: |
        #echo "IMAGE_TAG=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(echo "GHRC_$(date +%Y%m%dT%H.%M.%S)")" >> $GITHUB_ENV
        #echo ${GITHUB_SHA} | cut -c1-7
        echo "IMAGE_TAG=$(echo "GHRC_$(date +%Y%m%dT%H.%M.%S)")"

    - name: (SHARED) Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1      
        
    - name: (DEV) Build, Test, Tag, Push.
      id: Deploy
      run: |
        echo "===================================="
        echo "DEBUG:"
        echo "ECR_REPOSITORY: ${EKS_SERVICE}"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "EKS_SERVICE: ${EKS_SERVICE}"
        echo "===================================="
        ls -la ruby-apps-workflows/Dockerfile*
        cp -f ruby-apps-workflows/Dockerfile-${EKS_SERVICE}-service-sonarqube Dockerfile
        echo '${{ secrets.PFX_CERT }}' | base64 --decode >> ssl_cert.pfx
        echo '${{ secrets.SSL_PEM_CERT }}' | base64 --decode >> ssl_cert.pem
        echo '${{ secrets.SSL_PEM_KEY }}' | base64 --decode >> ssl_key.pem
        echo '${{ secrets.NUGET_CONFIG }}' >> NuGet.config
        echo "Building Docker Image"
        cp -fr Microservices/Ruby.Microservices.Spoofing.RabbitMQ.Tests Microservices/Spoofing/Ruby.Microservices.Spoofing.RabbitMQ.Tests
        cp -fr Microservices/Models Microservices/Spoofing/Models
        cp -fr Microservices/Common Microservices/Spoofing/Common
        cp -fr CoreApps Microservices/Spoofing/CoreApps
        sed -i -e 's,\..\Ruby.Microservices.Spoofing.RabbitMQ.Tests,"Ruby.Microservices.Spoofing.RabbitMQ.Tests,g' Microservices/Spoofing/Ruby.Microservices.Spoofing.RabbitMQ.sln
        sed -i -e 's,\.",,g' Microservices/Spoofing/Ruby.Microservices.Spoofing.RabbitMQ.sln
        #cat Microservices/Spoofing/Ruby.Microservices.Spoofing.RabbitMQ.sln
        echo "===================================="
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$IMAGE_TAG --build-arg EKS_SERVICE=${EKS_SERVICE} Microservices/Spoofing
        echo "===================================="
        echo "Pushing Docker Image"
        echo "===================================="
        docker push ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$IMAGE_TAG
        #echo "::set-env name=IMAGE::${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$IMAGE_TAG"
        
    - name: (GLOBAL) Check out ruby-apps-deploy repository
      uses: actions/checkout@master
      with:
        token: ${{ secrets.PAT }}
        repository: callruby/ruby-apps-deploy
        path: ruby-apps-deploy
        ref: 'master'

    - uses: imranismail/setup-kustomize@v1
    
    - name: (DEV) Update Tag - Deploy to EKS through ArgoCD
      id: UpdateTag
      run: |
        echo "===================================="
        echo "DEBUG:"
        echo "ECR_REPOSITORY: ${EKS_SERVICE}"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "EKS_SERVICE: ${EKS_SERVICE}"
        echo "===================================="
        ls -la ruby-apps-deploy
        cd ruby-apps-deploy/helm/dev/$EKS_SERVICE
        ls -la
        #kustomize edit set image $EKS_sERVICE=${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:${IMAGE_TAG}
        sed -i -e "s|image:.*|image: ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:${IMAGE_TAG}|g" values.yaml
        #cat kustomization.yml
        cat values.yaml
        git config user.email "check-action@github"
        git config user.name "check-action"
        git pull
        #git add kustomization.yml
        git add values.yaml
        git commit -m "Update ${EKS_SERVICE} image to ${IMAGE_TAG} on deploy file"
        set +e
        git push origin master > error 
        cat error
        if [[ $(cat error | grep -c "error" ) -eq 1 ]]; then
          echo "========================================================"
          echo "Retrying...."
          echo "========================================================"
          set -e
          sleep 5
          git pull
          git commit -m "Update ${EKS_SERVICE} image to ${IMAGE_TAG} on deploy file"
          git push origin master
        fi
        
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.17.0
      if: always()
      with:
        channel-id: ${{ secrets.SLACK_BOT_CHANNEL }}
        #slack-message: "Pull Request pipeline on ruby-apps-deploy repository was ended, result: ${{ job.status }}\n"
        payload: |
            {
              "text": ":github: New Image ${{env.EKS_SERVICE}}:${{env.IMAGE_TAG}} for ${{ github.repository }} from RELEASE branch - Status: ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":github: New Image ${{env.EKS_SERVICE}}:${{env.IMAGE_TAG}} for ${{ github.repository }} - Status: ${{ job.status }}\n\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Author: <https://github.com/${{ github.event.sender.login }}|@${{ github.event.sender.login }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Commit Sha: >${{ github.sha }}>"
                    }                    
                  ]
                },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Pipeline Execution: Press Here"
                    },
                    "url": "${{env.button_url}}"
                  }
                ]
              }                
              ]
            }          
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        button_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
    - name: Checkout code
      uses: actions/checkout@v2
