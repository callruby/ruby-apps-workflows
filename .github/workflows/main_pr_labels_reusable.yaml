name: PR environment deployer
on:
  workflow_call:
    inputs:
      tag: 
        type: string
    secrets:
      PAT:
        required: true
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true
      EKS_SERVICE:
        required: true
      AWS_DEFAULT_REGION:
        required: true
      NUGET_CONFIG:
        required: true
      SLACK_BOT_TOKEN:
        required: false
      SLACK_BOT_CHANNEL:
        required: false
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_PASSWORD:
        required: false
      DEPLOY_TO_ECS:
        required: false
      ECS_QA_CLUSTER_NAME:
        required: false
      ECS_QA_SERVICE_NAME:
        required: false
                
env:
  REPOSITORY: "ruby-apps-deploy"
  REPOSITORY_PROJECT: "ruby-project-deploy"
  REPOSITORY_WORKFLOW: "ruby-apps-workflows"
  AWS_DEFAULT_REGION: "us-west-1"

jobs:
  build:
    name: Pull request environment deployer
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2.0.0
      
      - name: Get short SHA
        id: slug
        run: |
          echo "COMMIT=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo ${{ github.event.pull_request.head.sha }} | cut -c1-7    
    
      - name: Turnstyle
        uses: softprops/turnstyle@v1
        with:
           continue-after-seconds: 500 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: (GLOBAL) Check out ${{env.REPOSITORY_WORKFLOW}} repository
        uses: actions/checkout@master
        with:
          token: ${{ secrets.PAT }}
          repository: callruby/${{env.REPOSITORY_WORKFLOW}}
          path: ${{env.REPOSITORY_WORKFLOW}}
          ref: 'master'
          fetch-depth: 1          
    
      - name: (GLOBAL) Check out ${{env.REPOSITORY}} repository
        uses: actions/checkout@master
        with:
          token: ${{ secrets.PAT }}
          repository: callruby/${{env.REPOSITORY}}
          path: ${{env.REPOSITORY}}
          ref: 'master'
    
      #Enforce branch policy
      - uses: deepakputhraya/action-branch-name@master
        with:
          #regex: '([a-z])+\/([a-z])+' # Regex the branch should match. This example enforces grouping
          allowed_prefixes: 'feature,stable,fix,hotfix' # All branches should start with the given prefix
          ignore: master,develop,dev,release,main # Ignore exactly matching branch names from convention
          min_length: 5 # Min length of the branch name
          max_length: 100 # Max length of the branch name
        
      #- name: Import GPG key
        #uses: crazy-max/ghaction-import-gpg@v4
        #with:
          #gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          #passphrase: ${{ secrets.GPG_PASSPHRASE }}
          #git_user_signingkey: true
          #git_commit_gpgsign: true
                  
      - name: (GLOBAL) Debug
        run: |
          echo "EKS_SERVICE=${{secrets.EKS_SERVICE}}" >> $GITHUB_ENV
          echo "ECS_QA_CLUSTER_NAME=${{secrets.ECS_QA_CLUSTER_NAME}}" >> $GITHUB_ENV
          echo "ECS_QA_SERVICE_NAME=${{secrets.ECS_QA_SERVICE_NAME}}" >> $GITHUB_ENV
          echo "DEPLOY_TO_ECS=${{secrets.DEPLOY_TO_ECS}}" >> $GITHUB_ENV
          TOK=$(echo U2FsdGVkX1+quT9qjFncsdkCMVjo8ghWacdeqPOooL1p1i930rQL88mso6ek8TQV047H4m1rPLrkHs4iOcrVIRvcvuvEwArP2ZzP8/5IyKUXlQ9csJtWDx82PFbbgB+B | openssl enc -aes256 -base64 -d -k ${{secrets.GPG_PASSPHRASE}}| grep xox)
          echo "SLTOK=$(echo $TOK)" >> $GITHUB_ENV          
    
      #Comment if it has to be run on a public Agent 
      - name: (GLOBAL) Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          #Uncomment if it has to be run on a public Agent    
          #aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          #aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          #aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: (SHARED) Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}        
      
      - name: (DEV) Build, Test, Tag, Push and Deploy to EKS
        id: DeploytoEcr
        run: |
          echo "===================================="
          echo "DEBUG:"
          echo "ECR_REPOSITORY: ${EKS_SERVICE}"
          echo "IMAGE_TAG: $COMMIT"
          echo "EKS_SERVICE: ${EKS_SERVICE}"
          echo "===================================="
          echo "Building Docker Image"
          echo "===================================="
          ls -la ruby-apps-workflows/Dockerfile*
          cp -f ruby-apps-workflows/Dockerfile-${EKS_SERVICE} Dockerfile
          echo '${{ secrets.PFX_CERT }}' | base64 --decode >> ssl_cert.pfx
          echo '${{ secrets.SSL_PEM_CERT }}' | base64 --decode >> ssl_cert.pem
          echo '${{ secrets.SSL_PEM_KEY }}' | base64 --decode >> ssl_key.pem          
          echo '${{ secrets.NUGET_CONFIG }}' >> NuGet.config
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$COMMIT --build-arg EKS_SERVICE=${EKS_SERVICE} .
          echo "===================================="
          echo "Pushing Docker Image"
          echo "===================================="
          docker push ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$COMMIT
          #echo "::set-env name=IMAGE::${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$COMMIT"
                  
      - name: (GLOBAL) Check out ruby-apps-deploy repository
        uses: actions/checkout@master
        with:
          token: ${{ secrets.PAT }}
          repository: callruby/ruby-apps-deploy
          path: ruby-apps-deploy
          ref: 'master'
            
      - name: (QA) Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_OLD_QA_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_OLD_QA_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
           
      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1.0.3
        with:
          version: 2     # default
          verbose: false # default
          arch: amd64    # allowed values: amd64, arm64          
    
      - name: Check if a valid Environment is set and deploy the pr image
        env:
          LABELS: ${{ toJson(github.event.pull_request.labels) }}
          PULL_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
          ECR_REPO: 425300134585.dkr.ecr.us-west-1.amazonaws.com
        run: |
          case $EKS_SERVICE in
            prl-frontend)
              ECR_REPO_NAME=prlv2-frontend
              ;;
            servicehandling-service)
              ECR_REPO_NAME=servicehandlingservice
              ;;
            prl-webapi)
              ECR_REPO_NAME=prlv2-webapi
              ;;
            identity-service)
              ECR_REPO_NAME=identity-server
              ;;
            employeedirectory-service)
              ECR_REPO_NAME=employeedirectory
              ;;                    
            *)
              ECR_REPO_NAME=$EKS_SERVICE
             ;;
          esac
          echo "ECR_REPO_NAME=${ECR_REPO_NAME}" >> $GITHUB_ENV        
        
          if jq --exit-status 'any(test("QA1") or test("QA2") or test("QA3") or test("QA4") or test("QA5") or test("QA6"))' >/dev/null <<< $PULL_LABELS; then
          POSSIBLE_ENVS="QA1 QA2 QA3 QA4 QA5 QA6 "
          for LABEL in $(echo $LABELS | jq -r '.[].name'); do
            if [[ $POSSIBLE_ENVS =~ (^|[[:space:]])$LABEL($|[[:space:]]) ]]; then
              ENVS+=" $LABEL"
            fi
          done
          VALUES=$(jq -c -n --arg v "${ENVS:1}" '$v | split(" ")' | sed 's/[][]//g')
          #echo $VALUES
          IFS=','
          ls -la ruby-apps-deploy
          cd ruby-apps-deploy
          git pull
          git config user.email "check-action@github"
          git config user.name "check-action"          
          for VAL in $VALUES; do 
            echo "==================================================================================="
            echo "Updating Environment image on the following environments ( FARGATE )"
            echo $VAL
            echo "==================================================================================="
            VAL=$(echo $VAL | tr '[:upper:]' '[:lower:]' | sed 's,",,g')
            docker tag ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$COMMIT callrubydev/$ECR_REPO_NAME:$VAL
            docker push callrubydev/$ECR_REPO_NAME:$VAL
            echo "$DEPLOY_TO_ECS"
            if [[ "$DEPLOY_TO_ECS" == "true" ]]; then
              echo "===================================================================================================="
              echo "Deploying to ECS: ${ECS_QA_SERVICE_NAME}_${VAL} ${ECS_QA_CLUSTER_NAME}"
              echo "===================================================================================================="
              aws ecs update-service --cluster "${ECS_QA_CLUSTER_NAME}" --service "${ECS_QA_SERVICE_NAME}_${VAL}" --force-new-deployment --region us-west-2
              sleep 3
              echo "===================================================================================================="
              echo "Waiting for the deployment on ECS "
              echo "===================================================================================================="  
              aws ecs wait services-stable --cluster "${$ECS_QA_CLUSTER_NAME}" --services "${ECS_QA_SERVICE_NAME}_${VAL}" --region us-west-2
            else
              echo "===================================================================================================="
              echo "Ignore deploy to ECS: ${DEPLOY_TO_ECS}"
              echo "===================================================================================================="  
            fi
            echo "==================================================================================="
            echo "Updating PR image on the following environments ( EKS )"
            echo $VAL
            echo "==================================================================================="
            if [ -f "helm/$VAL/${EKS_SERVICE}/values.yaml" ]; then
              #cat helm/$VAL/${EKS_SERVICE}/values.yaml
              sed -i -e "s|image:.*|image: $ECR_REPO/${EKS_SERVICE}:$COMMIT|g" helm/$VAL/${EKS_SERVICE}/values.yaml
              #cat helm/$VAL/${EKS_SERVICE}/values.yaml
              git add helm/$VAL/${EKS_SERVICE}/values.yaml
            fi
          done  
          echo "ENVIRONMENT=$(echo ${VALUES} | sed 's,",,g')" >> $GITHUB_ENV
          echo $VALUES | sed 's,",,g'
          set +e
          git commit -m "Update ${EKS_SERVICE} image to ${COMMIT} on deploy folder/s $VALUES"
          git status
          git push origin master > error 
          cat error
          if [[ $(cat error | grep -c "error" ) -eq 1 ]]; then
            echo "========================================================"
            echo "Retrying...."
            echo "========================================================"
            #set -e
            sleep 5
            git pull
            git commit -m "Update ${EKS_SERVICE} image to ${COMMIT} on deploy folder/s $VALUES"
            git push origin master
          fi  
          else
            echo $LABELS
            echo "::error ::Please set a valid env name as a label"
            exit 1
          fi
          
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.17.0
        if: always()
        with:
          channel-id: ${{ secrets.SLACK_BOT_CHANNEL }}
          #slack-message: "Pull Request pipeline on ruby-apps-deploy repository was ended, result: ${{ job.status }}\n"
          payload: |
            {
              "text": ":github: Image ${{env.EKS_SERVICE}}:${{github.event.inputs.Tag}} was selected to deploy into ${{env.environment}} - Status: ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":github: Image ${{env.EKS_SERVICE}}:${{github.event.inputs.Tag}} was selected to deploy into ${{env.environment}} - Status: ${{ job.status }}\n\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Author: <https://github.com/${{ github.event.sender.login }}|@${{ github.event.sender.login }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Commit Sha: >${{ github.sha }}>"
                    }                    
                  ]
                },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Pipeline Execution: Press Here"
                    },
                    "url": "${{env.button_url}}"
                  }
                ]
              }                
              ]
            }          
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          button_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          environment: ${{env.ENVIRONMENT}}

      - name: Checkout code
        uses: actions/checkout@v2
