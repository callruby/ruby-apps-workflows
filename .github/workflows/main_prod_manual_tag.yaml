on:
  workflow_dispatch:
    inputs:
      Tag:
        description: 'Image tag to be set as production'
        type: string
        required: true
        default: 'GHRC_'        
      
name: Set release image as production.
env:
  REPOSITORY_WORKFLOW: "ruby-apps-workflows"
  AWS_DEFAULT_REGION: "us-west-1"
jobs:
  build:
    environment: default
    runs-on: self-hosted
    #runs-on: ubuntu-latest #Uncomment if it has to be run on a public Agent
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2.0.0

    - name: Turnstyle
      uses: softprops/turnstyle@v1
      with:
         continue-after-seconds: 500 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  
    - name: (GLOBAL) Configure Global Variables.
      run: |
        echo "EKS_SERVICE=${{secrets.EKS_SERVICE}}" >> $GITHUB_ENV
                    
    - name: Set Image Tag
      id: slug
      run: |
        echo "IMAGE_TAG=${{github.event.inputs.Tag}}" >> $GITHUB_ENV
        
    - name: (SHARED) Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1      
        
    - name: (DEV) Pull & TAG.
      id: Deploy
      run: |
        echo "===================================="
        echo "DEBUG:"
        echo "ECR_REPOSITORY: ${EKS_SERVICE}"
        echo "IMAGE_TAG: $IMAGE_TAG"
        echo "EKS_SERVICE: ${EKS_SERVICE}"
        echo "===================================="
        docker pull ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$IMAGE_TAG
        echo "===================================="
        echo "Tag Docker Image"
        echo "===================================="
        case $EKS_SERVICE in
          prl-frontend)
            ECR_REPO_NAME=prlv2-frontend
            ;;
          servicehandling-service)
            ECR_REPO_NAME=servicehandlingservice
            ;;
          prl-webapi)
            ECR_REPO_NAME=prlv2-webapi
            ;;
          identity-service)
            ECR_REPO_NAME=identity-server
            ;;
          employeedirectory-service)
            ECR_REPO_NAME=employeedirectory
            ;;
          prl-authentication-service)
            ECR_REPO_NAME=newprl-auth-service
            ;;
          spoofing)
            ECR_REPO_NAME=spoofing-service
            ;;            
          *)
            ECR_REPO_NAME=$EKS_SERVICE
           ;;
        esac
        echo "ECR_REPO_NAME=${ECR_REPO_NAME}" >> $GITHUB_ENV
        docker tag ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:production
        docker tag ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:$IMAGE_TAG callrubydev/$ECR_REPO_NAME:production
        docker push ${{ steps.login-ecr.outputs.registry }}/${EKS_SERVICE}:production

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: (DEV) Push to Dockerhub.
      id: push_dockerHub
      run: |
        docker push callrubydev/$ECR_REPO_NAME:production
        
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'v%Y%m%d%S')"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.IMAGE_TAG }}-${{ steps.date.outputs.date }}
        release_name: "Image: ${{ env.IMAGE_TAG }} on: ${{ steps.date.outputs.date }}"
        body: |
          Pushed as production ( image: ${{ env.IMAGE_TAG }} ) on Date: ${{ steps.date.outputs.date }} by ${{ github.event.sender.login }}|@${{ github.event.sender.login }}
        draft: false
        prerelease: true        
                
    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.17.0
      if: always()
      with:
        channel-id: ${{ secrets.SLACK_BOT_CHANNEL }}
        #slack-message: "Pull Request pipeline on ruby-apps-deploy repository was ended, result: ${{ job.status }}\n"
        payload: |
            {
              "text": ":github: Release image ${{env.EKS_SERVICE}}:${{env.IMAGE_TAG}} for ${{ github.repository }} is set as PRODUCTION TAG - Status: ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":github: Release image ${{env.EKS_SERVICE}}:${{env.IMAGE_TAG}} for ${{ github.repository }} is set as PRODUCTION TAG - Status: ${{ job.status }}\n\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "Author: <https://github.com/${{ github.event.sender.login }}|@${{ github.event.sender.login }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "Commit Sha: >${{ github.sha }}>"
                    }                    
                  ]
                },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Pipeline Execution: Press Here"
                    },
                    "url": "${{env.button_url}}"
                  }
                ]
              }                
              ]
            }          
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        button_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
    - name: Checkout code
      uses: actions/checkout@v2
